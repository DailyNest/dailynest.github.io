---
import { render } from "astro:content";
import BaseLayout from "@/layouts/base.astro";
import ContentLayout from "@/layouts/content.astro";
import ArticleHeader from "./_components/article-header.astro";
import Giscus from "@/components/elements/giscus.astro";
import Toc from "@/components/elements/toc.astro";
import NewsCard from "@/components/cards/newsCard.astro";
import { SITE } from "@/lib/config";

import { articlesHandler } from "@/lib/handlers/articles";

export const getStaticPaths = async () => {
  const articles = articlesHandler.allArticles();

  return articles.map((article) => ({
    params: { id: article.id },
    props: { article },
  }));
};
const { article } = Astro.props;

const { Content, remarkPluginFrontmatter } = await render(article);

// Compute next article (older by date; fallback to newer if last) and recommendations (same category first)
const allArticles = articlesHandler.allArticles();
const currentIndex = allArticles.findIndex((a) => a.id === article.id);
const nextArticle =
  currentIndex >= 0
    ? (allArticles[currentIndex + 1] ?? allArticles[currentIndex - 1] ?? null)
    : null;

let recommended = allArticles
  .filter(
    (a) =>
      a.id !== article.id &&
      (!nextArticle || a.id !== nextArticle.id) &&
      a.data.category.id === article.data.category.id
  )
  .slice(0, 3);
if (recommended.length < 3) {
  const fillers = allArticles
    .filter(
      (a) =>
        a.id !== article.id &&
        (!nextArticle || a.id !== nextArticle.id) &&
        !recommended.some((r) => r.id === a.id)
    )
    .slice(0, 3 - recommended.length);
  recommended = [...recommended, ...fillers];
}
---

<BaseLayout entry={article}>
  <div
    class="grid grid-cols-1 gap-6 lg:grid-cols-[16rem_minmax(0,1248px)_16rem] xl:grid-cols-[18rem_minmax(0,1248px)_18rem]"
  >
    <!-- Main article column (center track) -->
    <div class="min-w-0 lg:col-start-2">
      <ArticleHeader
        article={article}
        readingTime={remarkPluginFrontmatter.minutesRead}
        lastModified={remarkPluginFrontmatter.lastModified || null}
      />
      <!-- Mobile ToC inline -->
      <div class="pt-2">
        <div class="lg:hidden mb-6">
          <details class="bg-base-200/40 rounded-lg border border-base-300">
            <summary
              class="cursor-pointer py-3 px-4 font-semibold flex items-center justify-between"
            >
              <span>On this page</span>
              <span class="text-xs opacity-60">Click to expand</span>
            </summary>
            <div class="px-4 pb-4 space-y-2">
              <nav aria-label="Table of contents" class="text-xs">
                <ul id="mobile-toc-list" class="space-y-0.5"></ul>
              </nav>
              <div class="pt-2 border-t border-base-300 mb-2">
                <a
                  href={`${SITE.github}/edit/main/src/content/articles/${article.id}/index.mdx`}
                  class="btn btn-xs btn-outline w-full"
                >
                  Edit this article
                </a>
              </div>
            </div>
          </details>
        </div>
      </div>
      <ContentLayout>
        <Content />
      </ContentLayout>

      {
        nextArticle || recommended.length > 0 ? (
          <section class="mt-10">
            {nextArticle ? (
              <div class="mb-8">
                <h2 class="text-xl font-semibold mb-3">Next up</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  <NewsCard article={nextArticle} index={0} />
                </div>
              </div>
            ) : null}

            {recommended.length > 0 ? (
              <div>
                <h2 class="text-xl font-semibold mb-3">Recommended for you</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {recommended.map((rec, i) => (
                    <NewsCard article={rec} index={i} />
                  ))}
                </div>
              </div>
            ) : null}
          </section>
        ) : null
      }
      <!-- Comments -->
      <div class="mt-8">
        <Giscus />
      </div>
    </div>

    <!-- Desktop sidebar ToC on right (right track) -->
    <div class="hidden lg:block pt-2 lg:col-start-3">
      <div class="sticky top-20 w-56 xl:w-64">
        <nav
          aria-label="Table of contents"
          class="text-xs bg-base-100/80 backdrop-blur-sm rounded-lg p-3 border border-base-200"
        >
          <h3 class="font-semibold mb-2 text-sm">On this page</h3>
          <ul id="desktop-toc-list" class="space-y-0.5"></ul>
        </nav>
        <div class="mt-3 mb-4">
          <a
            href={`${SITE.github}/edit/main/src/content/articles/${article.id}/index.mdx`}
            class="btn btn-sm w-full btn-outline"
          >
            Edit this article
          </a>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script is:inline>
  const buildTOC = () => {
    const contentRoot =
      document.querySelector("article[data-pagefind-body]") ||
      document.querySelector("article.prose");
    if (!contentRoot) return;
    const headings = Array.from(contentRoot.querySelectorAll("h2, h3"));

    const desktopList = document.getElementById("desktop-toc-list");
    const mobileList = document.getElementById("mobile-toc-list");

    if (!desktopList && !mobileList) return;

    const buildList = (list) => {
      if (!list) return [];
      list.innerHTML = "";

      if (headings.length === 0) {
        list.innerHTML = '<li class="text-base-content/60">No sections</li>';
        return [];
      }

      return headings.map((h) => {
        if (!h.id)
          h.id = h.textContent
            .trim()
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, "-")
            .replace(/^-|-$/g, "");
        const li = document.createElement("li");
        li.className = h.tagName === "H3" ? "ml-3 text-xs" : "text-xs";
        const a = document.createElement("a");
        a.href = `#${h.id}`;
        a.textContent = h.textContent;
        a.className =
          "block py-1 px-2 rounded hover:bg-base-200 hover:text-primary transition-colors leading-tight";
        li.appendChild(a);
        list.appendChild(li);
        return { id: h.id, el: a };
      });
    };

    const desktopItems = buildList(desktopList);
    const mobileItems = buildList(mobileList);
    const allItems = [...desktopItems, ...mobileItems];

    if (allItems.length === 0) return;

    const clearActive = () => {
      allItems.forEach((i) => {
        i.el.classList.remove("text-primary", "font-semibold", "bg-primary/10");
        i.el.removeAttribute("aria-current");
      });
    };

    const setActive = (id) => {
      clearActive();
      allItems.forEach((item) => {
        if (item.id === id) {
          item.el.classList.add(
            "text-primary",
            "font-semibold",
            "bg-primary/10"
          );
          item.el.setAttribute("aria-current", "true");
        }
      });
    };

    const onScroll = () => {
      const offset = 140;
      let idx = -1;
      for (let i = 0; i < headings.length; i++) {
        const top = headings[i].getBoundingClientRect().top;
        if (top - offset <= 0) idx = i;
        else break;
      }
      const activeId = idx >= 0 ? headings[idx].id : headings[0]?.id;
      if (activeId) setActive(activeId);
    };

    window.addEventListener("scroll", onScroll, { passive: true });
    onScroll();

    // Close mobile details after clicking a link
    if (mobileList) {
      const details = mobileList.closest("details");
      if (details) {
        mobileList.addEventListener("click", (e) => {
          if (e.target && e.target.tagName === "A") {
            details.open = false;
          }
        });
      }
    }
  };

  const initTOC = () => buildTOC();
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initTOC, { once: true });
  } else {
    initTOC();
  }
  document.addEventListener("astro:page-load", initTOC);
  document.addEventListener("astro:after-swap", initTOC);
</script>
