---
import type { GetStaticPaths } from "astro";
import { SITE } from "@/lib/config";
import { articlesHandler } from "@/lib/handlers/articles";
import { authorsHandler } from "@/lib/handlers/authors";
import ListLayout from "@/layouts/list.astro";
import WideCard from "@/components/cards/wideCard.astro";
import Pagination from "@/components/shared/pagination.astro";
import { getEntry } from "astro:content";

export const getStaticPaths = (({ paginate }) => {
  const allAuthors = authorsHandler.allAuthors();
  const allArticles = articlesHandler.allArticles();

  return allAuthors.flatMap((author) => {
    const filteredArticles = allArticles.filter((article) =>
      article.data.authors.map((a) => a.id).includes(author.id),
    );
    return paginate(filteredArticles, {
      params: { id: author.id },
      pageSize: SITE.postsPerPage,
    });
  });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const params = Astro.params;
const articles = page.data;
const pathname = new URL(Astro.request.url).pathname.split("/");
const basePath = `${pathname[1]}/${pathname[2]}`;

const entry = await getEntry("views", "author");
const author = authorsHandler.findAuthor(params.id);

if (!entry) {
  return Astro.redirect("/404");
}

const [HEADER] = entry.data.blocks;
---

<ListLayout
  header={`${author.data.name} â€” ${HEADER.title}`}
  entry={{
    ...entry,
    data: {
      ...entry.data,
      // For meta: use "{Author Name} | Site" via getMeta by setting the view title to the author name only
      title: `${author.data.name}`,
      description: entry.data.description,
      keywords: entry.data.keywords || [],
    },
  }}
>
  <!-- Person structured data for author page -->
  <script type="application/ld+json">
    {JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'Person',
      name: author.data.name,
      description: author.data.bio,
      jobTitle: author.data.job,
      url: `${Astro.site}authors/${author.id}`,
      image: author.data.avatar?.src
        ? new URL(author.data.avatar.src, Astro.site).href
        : author.data.avatarUrl || undefined,
      sameAs: Array.isArray(author.data.social)
        ? author.data.social.map((s) => s.url)
        : [],
    })}
  </script>
  <section class="flex-1">
    <ul class="flex flex-col gap-4">
      {
        articles.map((article) => (
          <WideCard
            article={article}
            isLast={articles.lastIndexOf(article) === articles.length - 1}
          />
        ))
      }
    </ul>
  </section>

  <Pagination
    length={page.lastPage}
    currentUrl={page.url.current}
    currentPage={page.currentPage}
    baseUrl={`/${basePath}`}
    prevUrl={page.url.prev}
    nextUrl={page.url.next}
    lastUrl={`/${basePath}/${page.lastPage}`}
  />
</ListLayout>
