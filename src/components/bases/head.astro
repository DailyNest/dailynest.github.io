---
import "@/styles/global.css";
import "@fontsource/source-sans-pro/400.css";
import "@fontsource/source-sans-pro/600.css";
import "@fontsource/source-sans-pro/700.css";
import "@fontsource-variable/source-serif-4";
import { ClientRouter } from "astro:transitions";
import { SITE } from "@/lib/config";
import type { ArticleMeta, Meta } from "@/lib/types";
import { GOOGLE_CONFIG, hasGoogleAnalytics, hasGoogleTagManager, hasGoogleAdSense } from "@/utils/google-config";

type Props = {
  meta: Meta | ArticleMeta;
};

const { meta } = Astro.props;

// Type guard to check if props is ArticleMeta
const isArticleMeta = (props: Props["meta"]): props is ArticleMeta =>
  props.type === "article";
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href;

const OGImage = new URL(meta.ogImage, Astro.url).href;
---

<head>
  <!-- Global Metadata -->
  <meta charset={SITE.charset} />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <meta name="generator" content={Astro.generator} />
  {GOOGLE_CONFIG.SITE_VERIFICATION && (
    <meta name="google-site-verification" content={GOOGLE_CONFIG.SITE_VERIFICATION} />
  )}
  <!-- Favicons -->
  <link rel="icon" type="image/png" href="/favicon.png" sizes="96x96" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon.png" />
  <meta name="apple-mobile-web-app-title" content="DailyNest" />
  <link rel="manifest" href="/site.webmanifest" />

  <!-- Google AdSense -->
  {hasGoogleAdSense() && (
    <>
      <link rel="preload" as="script" href={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${GOOGLE_CONFIG.ADSENSE_CLIENT_ID}`}>
      <link rel="prefetch" href={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${GOOGLE_CONFIG.ADSENSE_CLIENT_ID}`}>
      <script is:inline async src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${GOOGLE_CONFIG.ADSENSE_CLIENT_ID}`}
         crossorigin="anonymous"></script>
    </>
  )}

  <!-- Google Analytics and Consent Mode -->
  {hasGoogleAnalytics() && (
    <>
      <script src={`https://www.googletagmanager.com/gtag/js?id=${GOOGLE_CONFIG.GA_MEASUREMENT_ID}`}></script>
      <script is:inline define:vars={{ gaId: GOOGLE_CONFIG.GA_MEASUREMENT_ID }}>
        // Set default consent state BEFORE loading gtag
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}

        // Set default consent state - advertising and functional are mandatory, others denied until user chooses
        gtag('consent', 'default', {
          'ad_storage': 'granted', // Always granted for AdSense
          'ad_user_data': 'granted', // Always granted for AdSense
          'ad_personalization': 'granted', // Always granted for AdSense
          'analytics_storage': 'denied', // Will be updated when user consents
          'functionality_storage': 'granted', // Always granted for functionality
          'security_storage': 'granted', // Always granted for functionality
          'personalization_storage': 'denied' // Will be updated when user consents
        });

        gtag('js', new Date());
        gtag('config', gaId, {
          'anonymize_ip': true,
          'allow_google_signals': false,
          'allow_ad_personalization_signals': false
        });

        // Make gtag globally available for debugging
        window.gtag = gtag;
      </script>
    </>
  )}

  <!-- Google Tag Manager -->
  {hasGoogleTagManager() && (
    <script is:inline define:vars={{ gtmId: GOOGLE_CONFIG.GTM_ID }}>
      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer', gtmId);
    </script>
  )}



  <!-- RSS & Sitemap -->
  <link rel="sitemap" href="/sitemap-index.xml" />
  <link
    rel="alternate"
    type="application/rss+xml"
    title={SITE.title}
    href={new URL("rss.xml", Astro.site)}
  />

  <!-- Additional SEO Links -->
  <link rel="home" href={new URL("/", Astro.site)} />
  <link rel="author" href={new URL("/about", Astro.site)} />
  <link rel="help" href={new URL("/contact", Astro.site)} />
  <link rel="privacy-policy" href={new URL("/privacy", Astro.site)} />
  <link rel="terms-of-service" href={new URL("/terms", Astro.site)} />

  <!-- Preconnect to external domains for performance -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link rel="preconnect" href="https://www.google-analytics.com" />
  <link rel="preconnect" href="https://www.googletagmanager.com" />
  <link rel="preconnect" href="https://pagead2.googlesyndication.com" />

  <!-- DNS prefetch for external resources -->
  <link rel="dns-prefetch" href="//www.google-analytics.com" />
  <link rel="dns-prefetch" href="//www.googletagmanager.com" />
  <link rel="dns-prefetch" href="//pagead2.googlesyndication.com" />

  <!-- Canonical URL -->
  <link rel="canonical" href={meta.canonical || canonicalURL} />

  <!-- Page Metadata -->
  <title>{isArticleMeta(meta) || Astro.url.pathname.includes('/authors/') ? meta.title : Astro.url.pathname.includes('/categories/') ? `${Astro.url.pathname.split('/')[2].charAt(0).toUpperCase() + Astro.url.pathname.split('/')[2].slice(1)} Articles | ${SITE.title}` : meta.title}</title>
  <meta name="title" content={isArticleMeta(meta) || Astro.url.pathname.includes('/authors/') ? meta.metaTitle : Astro.url.pathname.includes('/categories/') ? `${Astro.url.pathname.split('/')[2].charAt(0).toUpperCase() + Astro.url.pathname.split('/')[2].slice(1)} Articles` : meta.metaTitle} />
  <meta name="description" content={meta.description} />
  <meta name="robots" content="index, follow" />
  <meta name="author" content={SITE.author} />
  <meta name="language" content="en-US" />
  <meta name="revisit-after" content="7 days" />
  <meta name="distribution" content="global" />
  <meta name="rating" content="general" />
  <meta http-equiv="content-language" content="en-US" />
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <meta name="theme-color" content="#ffffff" />
  <meta name="msapplication-TileColor" content="#ffffff" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
  <meta name="format-detection" content="telephone=no" />
  <meta name="referrer" content="strict-origin-when-cross-origin" />
  {
    meta.xRobotsTag ? (
      <meta http-equiv="X-Robots-Tag" content={meta.xRobotsTag} />
    ) : null
  }
  {
    meta.keywords && meta.keywords.length > 0 ? (
      <meta name="keywords" content={meta.keywords.join(", ")} />
    ) : null
  }
  {meta.publisher ? <meta name="publisher" content={meta.publisher} /> : null}
  {
    meta.wordCount ? (
      <meta name="word_count" content={`${meta.wordCount}`} />
    ) : null
  }

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content={meta.type} />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:title" content={isArticleMeta(meta) || Astro.url.pathname.includes('/authors/') ? meta.title : Astro.url.pathname.includes('/categories/') ? `${Astro.url.pathname.split('/')[2].charAt(0).toUpperCase() + Astro.url.pathname.split('/')[2].slice(1)} Articles | ${SITE.title}` : meta.title} />
  <meta property="og:description" content={meta.description} />
  <meta property="og:image" content={OGImage} />
  <meta property="og:image:alt" content={meta.ogImageAlt} />
  <meta property="og:site_name" content={SITE.title} />
  <meta property="og:locale" content="en_US" />
  {
    isArticleMeta(meta) && meta.keywords && meta.keywords.length > 0 ? (
      meta.keywords.slice(0, 5).map((keyword) => (
        <meta property="article:tag" content={keyword} />
      ))
    ) : null
  }

  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={canonicalURL} />
  <meta property="twitter:title" content={isArticleMeta(meta) || Astro.url.pathname.includes('/authors/') ? meta.title : Astro.url.pathname.includes('/categories/') ? `${Astro.url.pathname.split('/')[2].charAt(0).toUpperCase() + Astro.url.pathname.split('/')[2].slice(1)} Articles | ${SITE.title}` : meta.title} />
  <meta property="twitter:description" content={meta.description} />
  <meta property="twitter:image" content={OGImage} />
  <meta property="twitter:image:alt" content={meta.ogImageAlt} />
  <meta property="twitter:site" content="@dailynest" />
  {
    isArticleMeta(meta) && meta.authors && meta.authors.length > 0 ? (
      <meta property="twitter:creator" content={`@${meta.authors[0].name.toLowerCase().replace(/\s+/g, '')}`} />
    ) : null
  }

  {
    isArticleMeta(meta) ? (
      <>
        <meta
          property="article:published_time"
          content={new Date(meta.publishedTime).toISOString()}
        />
        {meta.lastModified && (
          <meta
            property="article:modified_time"
            content={new Date(meta.lastModified).toISOString()}
          />
        )}

        {meta.authors.map((author) => (
          <>
            <meta property="author" content={author.name} />
            <meta
              property="article:author"
              content={new URL(`authors/${author.link}`, Astro.site).href}
            />
          </>
        ))}

        <!-- Article structured data -->
        <script is:inline type="application/ld+json">
          {JSON.stringify({
            '@context': 'https://schema.org',
            '@type': 'Article',
            headline: `DailyNest - ${meta.metaTitle}`,
            description: meta.description,
            image: [OGImage],
            datePublished: new Date(meta.publishedTime).toISOString(),
            ...(meta.lastModified && { dateModified: new Date(meta.lastModified).toISOString() }),
            author: meta.authors.map((a) => ({ '@type': 'Person', name: a.name, url: new URL(`authors/${a.link}`, Astro.site).href })),
            mainEntityOfPage: {
              '@type': 'WebPage',
              '@id': meta.canonical || canonicalURL,
            },
            publisher: {
              '@type': 'Organization',
              name: SITE.title,
              logo: {
                '@type': 'ImageObject',
                url: new URL('/favicon.png', Astro.site).href,
              },
            },
            ...(meta.keywords && meta.keywords.length > 0 && { keywords: meta.keywords.join(', ') }),
            ...(meta.wordCount && { wordCount: meta.wordCount }),
            articleSection: meta.category || 'Blog',
            inLanguage: 'en-US',
            isAccessibleForFree: true,
            copyrightHolder: {
              '@type': 'Organization',
              name: SITE.title,
            },
          })}
        </script>

        <!-- Breadcrumb structured data -->
        <script is:inline type="application/ld+json">
          {JSON.stringify({
            '@context': 'https://schema.org',
            '@type': 'BreadcrumbList',
            itemListElement: [
              {
                '@type': 'ListItem',
                position: 1,
                name: 'Home',
                item: new URL('/', Astro.site).href,
              },
              {
                '@type': 'ListItem',
                position: 2,
                name: meta.category || 'Blog',
                item: new URL(`/categories/${meta.category?.toLowerCase() || 'blog'}`, Astro.site).href,
              },
              {
                '@type': 'ListItem',
                position: 3,
                name: meta.title,
                item: meta.canonical || canonicalURL,
              },
            ],
          })}
        </script>
      </>
    ) : null
  }

  {
    !isArticleMeta(meta) && meta.metaTitle ? (
      <script is:inline type="application/ld+json">
        {JSON.stringify({
          '@context': 'https://schema.org',
          '@type': 'WebSite',
          name: meta.metaTitle,
          url: SITE.url,
          description: meta.description,
          publisher: {
            '@type': 'Organization',
            name: SITE.title,
            logo: {
              '@type': 'ImageObject',
              url: new URL('/favicon.png', SITE.url).href,
            },
          },
          potentialAction: {
            '@type': 'SearchAction',
            target: {
              '@type': 'EntryPoint',
              urlTemplate: new URL('/search?q={search_term_string}', SITE.url).href,
            },
            'query-input': 'required name=search_term_string',
          },
          inLanguage: 'en-US',
          copyrightHolder: {
            '@type': 'Organization',
            name: SITE.title,
          },
        })}
      </script>
    ) : null
  }

  <ClientRouter />
  <script is:inline>
    // Register service worker at site root if available
    (function registerSW() {
      if (typeof window === 'undefined') return;
      if (!('serviceWorker' in navigator)) return;
      try {
        // register from absolute path to avoid route-relative 404s
        navigator.serviceWorker.register('/sw.js').catch((err) => {
          // swallow registration errors in dev
          console.warn('Service worker registration failed:', err);
        });
      } catch (e) {
        // ignore
      }
    })();
  </script>
</head>
